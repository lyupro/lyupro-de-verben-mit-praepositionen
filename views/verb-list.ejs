<!-- views/verb-list.ejs -->
<!DOCTYPE html>
<html>
  <head>
    <title>Список глаголов</title>
    <style>
      .card {
        width: 200px;
        height: 100px;
        perspective: 1000px;
        margin: 10px;
        display: inline-block;
      }

      .card-inner {
        position: relative;
        width: 100%;
        height: 100%;
        text-align: center;
        transition: transform 0.6s;
        transform-style: preserve-3d;
      }

      .card:hover .card-inner {
        transform: rotateY(180deg);
      }

      .card-front, .card-back {
        position: absolute;
        width: 100%;
        height: 100%;
        backface-visibility: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .card-back {
          transform: rotateY(180deg);
          background-color: #f0f0f0; /* Добавляем фоновый цвет для обратной стороны */
          display: flex;
          flex-direction: column;
          justify-content: center;
          align-items: center;
          padding: 10px;
          text-align: center;
      }

      .card-back h2 {
          margin-bottom: 10px;
      }

      .card-back a {
          display: inline-block;
          background-color: #007bff;
          color: #fff;
          padding: 8px 16px;
          text-decoration: none;
          border-radius: 4px;
          transition: background-color 0.3s;
      }

      .card-back a:hover {
          background-color: #0056b3;
      }

      /* Styles for Alphabetic containers */
      .alphabet {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        grid-gap: 10px;
        margin-bottom: 20px;
      }

      .alphabet a {
        background-color: #f0f0f0;
        padding: 10px;
        text-align: center;
        text-decoration: none;
        color: #333;
      }

      .alphabet span.disabled {
          background-color: #ccc;
          color: #999;
          padding: 10px;
          text-align: center;
          cursor: not-allowed;
      }
    </style>
  </head>
  <body>
    <h1>Выберите глагол</h1>
    <input type="text" id="searchInput" placeholder="Поиск глагола" />
    <div id="searchResults"></div>

    <div class="alphabet">
        <% alphabet.forEach(letter => { %>
            <% if (letterAvailability[letter]) { %>
                <a href="/verb-list/letter/<%= letter %>"><%= letter %></a>
            <% } else { %>
                <span class="disabled"><%= letter %></span>
            <% } %>
        <% }) %>
    </div>

    <div>
      <% verbs.forEach(verb => { %>
        <div class="card">
          <div class="card-inner">
            <div class="card-front">
              <h2><%= verb.verb %></h2>
            </div>
            <div class="card-back">
                <h2><%= verb.translation %></h2>
                <a href="/verb-list/letter/<%= verb.verb.charAt(0).toUpperCase() %>/<%= verb.verb %>">Подробнее</a>
            </div>
          </div>
        </div>
      <% }) %>
    </div>
    <a href="/">Главная страница</a>

    <% if (typeof currentPage !== 'undefined' && typeof totalPages !== 'undefined') { %>
        <div class="pagination">
            <% if (currentPage > 1) { %>
                <a href="/verb-list/page/<%= currentPage - 1 %>">Назад</a>
            <% } %>
            <% for (let i = 1; i <= totalPages; i++) { %>
                <% if (i === currentPage) { %>
                    <span><%= i %></span>
                <% } else { %>
                    <a href="/verb-list/page/<%= i %>"><%= i %></a>
                <% } %>
            <% } %>
            <% if (currentPage < totalPages) { %>
                <a href="/verb-list/page/<%= currentPage + 1 %>">Вперед</a>
            <% } %>
        </div>
    <% } %>

    <script>
      const searchInput = document.getElementById('searchInput');
      const searchResults = document.getElementById('searchResults');

      searchInput.addEventListener('input', async () => {
        const query = searchInput.value.trim();
        if (query) {
          const response = await fetch(`/verb-list/search?q=${query}`);
          const verbs = await response.json();
          displaySearchResults(verbs);
        } else {
          searchResults.innerHTML = '';
        }
      });

      function displaySearchResults(verbs) {
        searchResults.innerHTML = '';
        if (verbs.length > 0) {
          const resultList = document.createElement('ul');
          verbs.forEach(verb => {
            const listItem = document.createElement('li');
            const link = document.createElement('a');
            link.href = `/verb-list/letter/${verb.verb.charAt(0).toUpperCase()}/${verb.verb}`;
            link.textContent = `${verb.verb} - ${verb.translation}`;
            listItem.appendChild(link);
            resultList.appendChild(listItem);
          });
          searchResults.appendChild(resultList);
        } else {
          searchResults.textContent = 'Ничего не найдено';
        }
      }

      document.querySelector('.pagination').addEventListener('click', function (event) {
          if (event.target.tagName === 'A') {
              event.preventDefault();
              const page = event.target.getAttribute('href').split('/').pop();
              loadVerbs(page);
          }
      });

      async function loadVerbs(page) {
          const response = await fetch(`/verb-list/page/${page}`);
          const html = await response.text();
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          document.querySelector('body').innerHTML = doc.querySelector('body').innerHTML;
          history.pushState(null, null, `/verb-list/page/${page}`);
      }
    </script>
  </body>
</html>