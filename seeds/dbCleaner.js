import readline from 'readline';
import { connectToDatabase, disconnectFromDatabase, getDatabaseStats, formatStats } from '../utils/dbSeederUtils.js';
import importConfig from '../config/importConfig.js';
import { getVerbModel, getVerbTranslationModel, getVerbTensesModel, getVerbSentencesModel, getVerbSentencesTranslationModel } from '../models/verb.js';
import { fileURLToPath } from 'url';

/**
 * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –≥–ª–∞–≥–æ–ª–æ–≤ –≤ MongoDB
 * –í–ù–ò–ú–ê–ù–ò–ï: –ù–ï –¢–†–û–ì–ê–ï–¢ —Ñ–∞–π–ª—ã –≤ !db
 */
async function cleanDatabase() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤');
    console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–∏—Ç –í–°–ï –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≥–ª–∞–≥–æ–ª–æ–≤ –∏–∑ MongoDB!');
    console.log('üìÅ –§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ !db –ù–ï –ë–£–î–£–¢ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã.\n');
    
    try {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await connectToDatabase();
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ—á–∏—Å—Ç–∫–∏
        console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
        const statsBefore = await getDatabaseStats();
        console.log(formatStats(statsBefore));
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const confirmed = await askForConfirmation();
        if (!confirmed) {
            console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
            return;
        }
        
        console.log('\nüóëÔ∏è  –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–π...');
        const cleanupStats = await performCleanup();
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        console.log('\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏...');
        const statsAfter = await getDatabaseStats();
        console.log(formatStats(statsAfter));
        
        // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
        console.log(`   –£–¥–∞–ª–µ–Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: ${cleanupStats.deletedCollections}`);
        console.log(`   –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${cleanupStats.deletedDocuments}`);
        console.log(`   –û—à–∏–±–æ–∫: ${cleanupStats.errors}`);
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    } finally {
        await disconnectFromDatabase();
    }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–π
 */
async function performCleanup() {
    const stats = {
        deletedCollections: 0,
        deletedDocuments: 0,
        errors: 0
    };
    
    for (const letter of importConfig.supportedLetters) {
        console.log(`   üìñ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—É–∫–≤—ã: ${letter.toUpperCase()}`);
        
        try {
            // –û—á–∏—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã
            const verbModel = getVerbModel(letter);
            const verbCount = await verbModel.countDocuments();
            if (verbCount > 0) {
                await verbModel.deleteMany({});
                stats.deletedDocuments += verbCount;
                stats.deletedCollections++;
                console.log(`      ‚úÖ –ì–ª–∞–≥–æ–ª—ã: —É–¥–∞–ª–µ–Ω–æ ${verbCount} –∑–∞–ø–∏—Å–µ–π`);
            }
            
            // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
            for (const language of importConfig.supportedLanguages) {
                try {
                    const translationModel = getVerbTranslationModel(letter, language);
                    const translationCount = await translationModel.countDocuments();
                    if (translationCount > 0) {
                        await translationModel.deleteMany({});
                        stats.deletedDocuments += translationCount;
                        stats.deletedCollections++;
                        console.log(`      ‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã (${language}): —É–¥–∞–ª–µ–Ω–æ ${translationCount} –∑–∞–ø–∏—Å–µ–π`);
                    }
                } catch (error) {
                    // –ö–æ–ª–ª–µ–∫—Ü–∏—è –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
                }
            }
            
            // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            for (const tense of importConfig.supportedTenses) {
                try {
                    // –í—Ä–µ–º–µ–Ω–∞
                    const tenseModel = getVerbTensesModel(letter, tense);
                    const tenseCount = await tenseModel.countDocuments();
                    if (tenseCount > 0) {
                        await tenseModel.deleteMany({});
                        stats.deletedDocuments += tenseCount;
                        stats.deletedCollections++;
                        console.log(`      ‚úÖ –í—Ä–µ–º–µ–Ω–∞ (${tense}): —É–¥–∞–ª–µ–Ω–æ ${tenseCount} –∑–∞–ø–∏—Å–µ–π`);
                    }
                    
                    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                    const sentenceModel = getVerbSentencesModel(letter, tense);
                    const sentenceCount = await sentenceModel.countDocuments();
                    if (sentenceCount > 0) {
                        await sentenceModel.deleteMany({});
                        stats.deletedDocuments += sentenceCount;
                        stats.deletedCollections++;
                        console.log(`      ‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (${tense}): —É–¥–∞–ª–µ–Ω–æ ${sentenceCount} –∑–∞–ø–∏—Å–µ–π`);
                    }
                    
                    // –ü–µ—Ä–µ–≤–æ–¥—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                    for (const language of importConfig.supportedLanguages) {
                        try {
                            const sentenceTranslationModel = getVerbSentencesTranslationModel(letter, tense, language);
                            const sentenceTranslationCount = await sentenceTranslationModel.countDocuments();
                            if (sentenceTranslationCount > 0) {
                                await sentenceTranslationModel.deleteMany({});
                                stats.deletedDocuments += sentenceTranslationCount;
                                stats.deletedCollections++;
                                console.log(`      ‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (${tense}, ${language}): —É–¥–∞–ª–µ–Ω–æ ${sentenceTranslationCount} –∑–∞–ø–∏—Å–µ–π`);
                            }
                        } catch (error) {
                            // –ö–æ–ª–ª–µ–∫—Ü–∏—è –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
                        }
                    }
                } catch (error) {
                    // –ö–æ–ª–ª–µ–∫—Ü–∏—è –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
                }
            }
            
        } catch (error) {
            console.error(`      ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±—É–∫–≤—ã ${letter}:`, error.message);
            stats.errors++;
        }
    }
    
    return stats;
}

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function askForConfirmation() {
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
    
    return new Promise((resolve) => {
        rl.question('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ? –í–≤–µ–¥–∏—Ç–µ "yes" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ', (answer) => {
            rl.close();
            resolve(answer.toLowerCase() === 'yes');
        });
    });
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
 */
function parseCommandLineArgs() {
    const args = process.argv.slice(2);
    const options = {
        force: false, // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        backup: false // –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    };
    
    args.forEach(arg => {
        switch (arg) {
            case '--force':
                options.force = true;
                break;
            case '--backup':
                options.backup = true;
                break;
            case '--help':
                showHelp();
                process.exit(0);
                break;
        }
    });
    
    return options;
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
 */
function showHelp() {
    console.log(`
–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  npm run clean:db [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --force       –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–û–ü–ê–°–ù–û!)
  --backup      –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π (–ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
  --help        –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  npm run clean:db
  npm run clean:db -- --force

–í–ù–ò–ú–ê–ù–ò–ï:
  –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª—è–µ—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –≥–ª–∞–≥–æ–ª–æ–≤ –∏–∑ MongoDB!
  –§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ !db –ù–ï –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç—Å—è.
  
  –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "npm run import:full" –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    `);
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π --force
 */
async function cleanDatabaseWithOptions() {
    const options = parseCommandLineArgs();
    
    if (options.force) {
        console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤ (—Ä–µ–∂–∏–º --force)');
        console.log('‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...\n');
        
        try {
            await connectToDatabase();
            console.log('üóëÔ∏è  –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –∫–æ–ª–ª–µ–∫—Ü–∏–π...');
            const cleanupStats = await performCleanup();
            
            console.log('\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            console.log(`   –£–¥–∞–ª–µ–Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: ${cleanupStats.deletedCollections}`);
            console.log(`   –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${cleanupStats.deletedDocuments}`);
            console.log(`   –û—à–∏–±–æ–∫: ${cleanupStats.errors}`);
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
            process.exit(1);
        } finally {
            await disconnectFromDatabase();
        }
    } else {
        await cleanDatabase();
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
const __filename = fileURLToPath(import.meta.url);
if (process.argv[1] === __filename) {
    cleanDatabaseWithOptions().catch(error => {
        console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
} 