import { connectToDatabase, disconnectFromDatabase, scanFilesForLetter, importDataOfType, getDatabaseStats, formatStats } from '../utils/dbSeederUtils.js';
import importConfig from '../config/importConfig.js';
import { fileURLToPath } from 'url';

/**
 * –ü–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–ø–∫–∏ !db
 */
async function fullDatabaseImport() {
    const startTime = Date.now();
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
    
    let totalStats = {
        processedLetters: 0,
        processedFiles: 0,
        importedRecords: 0,
        errors: 0,
        skippedFiles: 0
    };
    
    try {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await connectToDatabase();
        
        console.log('üìÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–∞–Ω–Ω—ã—Ö...');
        console.log(`   –ü—É—Ç—å: ${importConfig.paths.dataSource}`);
        console.log(`   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±—É–∫–≤—ã: ${importConfig.supportedLetters.length}`);
        console.log(`   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤—Ä–µ–º–µ–Ω–∞: ${importConfig.supportedTenses.join(', ')}`);
        console.log(`   –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: ${importConfig.supportedLanguages.join(', ')}\n`);
        
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –±—É–∫–≤—ã
        for (const letter of importConfig.supportedLetters) {
            console.log(`üìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—É–∫–≤—ã: ${letter.toUpperCase()}`);
            
            try {
                const filesForLetter = scanFilesForLetter(letter);
                const letterStats = await importLetterData(letter, filesForLetter);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                totalStats.processedLetters++;
                totalStats.processedFiles += letterStats.processedFiles;
                totalStats.importedRecords += letterStats.importedRecords;
                totalStats.errors += letterStats.errors;
                totalStats.skippedFiles += letterStats.skippedFiles;
                
                // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±—É–∫–≤–µ
                const total = letterStats.processedFiles;
                const success = total - letterStats.errors - letterStats.skippedFiles;
                console.log(`   üìä –§–∞–π–ª–æ–≤: ${total}, –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${success}, –æ—à–∏–±–æ–∫: ${letterStats.errors}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: ${letterStats.skippedFiles}`);
                console.log(`   üìà –ó–∞–ø–∏—Å–µ–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${letterStats.importedRecords}\n`);
                
            } catch (error) {
                console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±—É–∫–≤—ã ${letter}:`, error.message);
                totalStats.errors++;
            }
        }
        
        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        const endTime = Date.now();
        const duration = ((endTime - startTime) / 1000).toFixed(2);
        
        console.log('üéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n');
        console.log('üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±—É–∫–≤: ${totalStats.processedLetters}/${importConfig.supportedLetters.length}`);
        console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalStats.processedFiles}`);
        console.log(`   –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${totalStats.importedRecords}`);
        console.log(`   –û—à–∏–±–æ–∫: ${totalStats.errors}`);
        console.log(`   –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${totalStats.skippedFiles}`);
        console.log(`   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration} —Å–µ–∫—É–Ω–¥\n`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        const dbStats = await getDatabaseStats();
        console.log(formatStats(dbStats));
        
    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        process.exit(1);
    } finally {
        await disconnectFromDatabase();
    }
}

/**
 * –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–π –±—É–∫–≤—ã
 */
async function importLetterData(letter, filesForLetter) {
    const letterStats = {
        processedFiles: 0,
        importedRecords: 0,
        errors: 0,
        skippedFiles: 0
    };
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    for (const fileType of importConfig.importOrder) {
        const files = filesForLetter[fileType] || [];
        
        for (const fileInfo of files) {
            letterStats.processedFiles++;
            
            try {
                const result = await importDataOfType(fileInfo, {
                    clearExisting: true,
                    logLevel: importConfig.import.logLevel
                });
                
                if (result.success) {
                    letterStats.importedRecords += result.imported;
                } else {
                    console.error(`   ‚ùå ${fileInfo.fileName}: ${result.error}`);
                    letterStats.errors++;
                }
                
            } catch (error) {
                console.error(`   ‚ùå ${fileInfo.fileName}: ${error.message}`);
                letterStats.errors++;
            }
        }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    const allFiles = Object.values(filesForLetter).flat();
    const expectedFiles = importConfig.importOrder.reduce((total, type) => total + filesForLetter[type].length, 0);
    
    if (allFiles.length > expectedFiles) {
        const unexpectedFiles = allFiles.length - expectedFiles;
        letterStats.skippedFiles += unexpectedFiles;
        console.warn(`   ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${unexpectedFiles}`);
    }
    
    return letterStats;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
 */
function parseCommandLineArgs() {
    const args = process.argv.slice(2);
    const options = {
        clearExisting: true,
        logLevel: 'info'
    };
    
    args.forEach(arg => {
        switch (arg) {
            case '--no-clear':
                options.clearExisting = false;
                break;
            case '--verbose':
                options.logLevel = 'verbose';
                break;
            case '--silent':
                options.logLevel = 'silent';
                break;
            case '--help':
                showHelp();
                process.exit(0);
                break;
        }
    });
    
    return options;
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
 */
function showHelp() {
    console.log(`
–ü–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  npm run import:full [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --no-clear    –ù–µ –æ—á–∏—â–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
  --verbose     –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
  --silent      –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
  --help        –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  npm run import:full
  npm run import:full -- --verbose
  npm run import:full -- --no-clear --silent

–û–ø–∏—Å–∞–Ω–∏–µ:
  –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–ª–∞–≥–æ–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ !db
  –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö MongoDB. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
  –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –±—É–∫–≤, –≤—Ä–µ–º–µ–Ω –∏ —è–∑—ã–∫–æ–≤.
    `);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
const __filename = fileURLToPath(import.meta.url);
if (process.argv[1] === __filename) {
    const options = parseCommandLineArgs();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ü–∏–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if (options.logLevel) {
        importConfig.import.logLevel = options.logLevel;
    }
    
    fullDatabaseImport().catch(error => {
        console.error('üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
} 