// test/utils/env-checker.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ç–µ—Å—Ç–æ–≤–∞—è —É—Ç–∏–ª–∏—Ç–∞)

import 'dotenv/config';
import jwt from 'jsonwebtoken';
import { connectToDatabase } from '../../db.js';

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
function checkEnvironmentVariables() {
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...\n');
    
    const criticalVars = [
        { name: 'JWT_SECRET', value: process.env.JWT_SECRET, critical: true },
        { name: 'JWT_EXPIRES_IN', value: process.env.JWT_EXPIRES_IN, critical: true },
        { name: 'MONGO_URI', value: process.env.MONGO_URI, critical: true },
        { name: 'NODE_ENV', value: process.env.NODE_ENV, critical: false },
        { name: 'NODE_PORT', value: process.env.NODE_PORT, critical: false },
        { name: 'APP_NAME', value: process.env.APP_NAME, critical: false },
        { name: 'APP_ENV', value: process.env.APP_ENV, critical: false }
    ];

    let hasErrors = false;

    criticalVars.forEach(({ name, value, critical }) => {
        if (value) {
            console.log(`‚úÖ ${name}: –ó–ê–ì–†–£–ñ–ï–ù–ê`);
        } else {
            const status = critical ? '‚ùå –ö–†–ò–¢–ò–ß–ù–û' : '‚ö†Ô∏è  –û–¢–°–£–¢–°–¢–í–£–ï–¢';
            console.log(`${status} ${name}: –ù–ï –ù–ê–ô–î–ï–ù–ê`);
            if (critical) hasErrors = true;
        }
    });

    return !hasErrors;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç JWT —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
 */
function testJWTFunctionality() {
    console.log('\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JWT...\n');
    
    try {
        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        const testPayload = { 
            test: 'data', 
            timestamp: Date.now() 
        };
        
        const testToken = jwt.sign(
            testPayload,
            process.env.JWT_SECRET,
            { expiresIn: process.env.JWT_EXPIRES_IN || '1h' }
        );
        
        console.log('‚úÖ JWT –ø–æ–¥–ø–∏—Å—å: –£–°–ü–ï–®–ù–û');
        console.log(`üìè –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: ${testToken.length} —Å–∏–º–≤–æ–ª–æ–≤`);
        
        // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
        const decoded = jwt.verify(testToken, process.env.JWT_SECRET);
        console.log('‚úÖ JWT –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: –£–°–ü–ï–®–ù–û');
        console.log(`üìã Payload —Å–æ–¥–µ—Ä–∂–∏—Ç: ${Object.keys(decoded).join(', ')}`);
        
        return true;
    } catch (error) {
        console.log('‚ùå JWT —Ç–µ—Å—Ç: –û–®–ò–ë–ö–ê');
        console.log(`üö® –û—à–∏–±–∫–∞: ${error.message}`);
        return false;
    }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
async function testDatabaseConnection() {
    console.log('\nüóÑÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
    
    try {
        await connectToDatabase();
        console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –£–°–ü–ï–®–ù–û');
        console.log(`üåê URI: ${process.env.MONGO_URI || process.env.MONGODB_URI}`);
        return true;
    } catch (error) {
        console.log('‚ùå MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –û–®–ò–ë–ö–ê');
        console.log(`üö® –û—à–∏–±–∫–∞: ${error.message}`);
        return false;
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 */
async function runHealthCheck() {
    console.log('ü©∫ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã Deutsch Trainer\n');
    console.log('=' .repeat(50));
    
    const envCheck = checkEnvironmentVariables();
    const jwtCheck = testJWTFunctionality();
    const dbCheck = await testDatabaseConnection();
    
    console.log('\n' + '=' .repeat(50));
    console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
    
    if (envCheck && jwtCheck && dbCheck) {
        console.log('üéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!');
        process.exit(0);
    } else {
        console.log('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!');
        console.log('\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        
        if (!envCheck) {
            console.log('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ');
        }
        if (!jwtCheck) {
            console.log('‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ JWT_SECRET —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
        }
        if (!dbCheck) {
            console.log('‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ MongoDB –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω');
        }
        
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
runHealthCheck().catch(error => {
    console.error('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    process.exit(1);
}); 